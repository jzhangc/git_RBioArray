% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/seqDEA.R
\name{rbioseq_import_count}
\alias{rbioseq_import_count}
\title{rbioseq_import_count}
\usage{
rbioseq_import_count(
  path = getwd(),
  species = NULL,
  target.annot.file = NULL,
  sample_id.var.name = NULL,
  sample_groups.var.name = NULL,
  gtf = NULL,
  raw.file.ext = ".txt",
  raw.file.sep = "",
  raw.file.source = "htseq-count",
  parallelComputing = FALSE,
  clusterType = "FORK",
  verbose = TRUE
)
}
\arguments{
\item{path}{Path to raw files. Default is the system working directory.}

\item{species}{Optional species code, following the traditional abbreviated naming convention, e.g. "hsa", "mmu".}

\item{target.annot.file}{Annotation file describing filenames and targets, and should be in \code{csv} format.}

\item{sample_id.var.name}{Sample id variable name in the \code{target.annot.file}.}

\item{sample_groups.var.name}{Sample group annotation variable name in the \code{target.annot.file}.}

\item{gtf}{matrix or data.frame. Parsed gtf/gff annotation. Can be obtained by function \code{\link{rbioseq_import_gtf}}.}

\item{raw.file.ext}{Raw file extention. Default is \code{".txt"}.}

\item{raw.file.sep}{Raw read count file separators. Default is \code{""\"\"}, i.e. white space.}

\item{raw.file.source}{Raw file source, i.e. program used to generate read counts. Currently only supports \code{"htseq-count"}.}

\item{parallelComputing}{Wether to use parallel computing or not. Default is \code{TRUE}.}

\item{verbose}{Wether to display messages. Default is \code{TRUE}. This will not affect error or warning messeages.}

\item{cluterType}{Only set when \code{parallelComputing = TRUE}, the type for parallel cluster. Options are \code{"PSOCK"} (all operating systems) and \code{"FORK"} (macOS and Unix-like system only). Default is \code{"PSOCK"}.}
}
\value{
Outputs a \code{rbioseq_count} object with merged read counts from mutliple files, with annotation. The \code{rbioseq_count} object contains the following:

         \code{raw_read_count}

         \code{sample_library_sizes}

         \code{targets}: Sample annotation matrix

         \code{sample_groups}: Factor object for sample group annotation

         \code{genes}: The associated feature names. The use of "gene" here is in a generic sense.

         \code{count_source}: program used to generate the reads

         \code{GTF_annotation}: if GTF annoation matrix was used

         \code{species}

         \code{files_processed}
}
\description{
Data pre-processing for RNA-seq read count files.
}
\details{
When \code{raw.file.source = "htseq-count"}, the function will cut off the last five summary raws.

         For \code{target.annot.file}, the argument doesn't accept full file path.
         The function will only seek the file under working directory. So, the file should be placed under working directory.

         Since the HTSeq-count program uses GTF/GFF annotation file for read couting,
         the results will always contain "\code{gene_id}" as the gene identification item.
         Therefore, when and \code{count_source = "htseq-count"} and \code{gtf.matrix} is set,
         the rest of the GTF/GFF information is merged into the \code{genes} item in the resulting \code{rbioseq_count} class object.

         The items from GTF/GFF information are as following:

         \code{gene_name}

         \code{gene_type}

         \code{chromosome}

         \code{start}

         \code{end}

         \code{length}

         Since the current HTSeq-count setting is to examine genes, NOT transcript.
         The \code{transcript_id} item is used to find the gene length.
         Specifically, the gene length is the length from the record where \code{transcript_id == gene_id}


         Transcript assessment will be added through future updates.
}
\examples{
\dontrun{
mrna_count <- rbioseq_import_count(path = "~/dataset/",
                                   species = "hsa",
                                   target.annot.file = "target.csv", sample_groups.var.name = "condition",
                                   gtf = gtf,
                                   raw.file.ext = ".out", raw.file.sep = "",
                                   raw.file.source = "htseq-count",
                                   parallelComputing = TRUE, clusterType = "FORK")
}
}
