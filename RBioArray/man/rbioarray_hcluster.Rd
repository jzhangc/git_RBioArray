% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/legacyFunctions.R
\name{rbioarray_hcluster}
\alias{rbioarray_hcluster}
\title{rbioarray_hcluster}
\usage{
rbioarray_hcluster(
  plotName = "data",
  fltlist = NULL,
  dataProbeVar = "ProbeName",
  genesymbolOnly = FALSE,
  annot = NULL,
  annotProbeVar = "ProbeName",
  genesymbolVar = NULL,
  n = "all",
  rmControl = TRUE,
  ctrlProbe = TRUE,
  ctrlTypeVar = "ControlType",
  sampleName = NULL,
  fct = NULL,
  colGroup = ifelse(length(levels(fct)) < 19, length(levels(fct)), 19),
  distance = "euclidean",
  clust = "complete",
  ColSideCol = TRUE,
  colColour = "Paired",
  mapColour = "PRGn",
  n_mapColour = 11,
  ...,
  plotWidth = 7,
  plotHeight = 7
)
}
\arguments{
\item{plotName}{File name for the export \code{pdf} plot file. Default is \code{"data"}.}

\item{fltlist}{Input filtered data, either a list, \code{EList} or \code{MAList} object.}

\item{dataProbeVar}{\code{fltlist} variable name for probe name. Default is \code{"ProbeName"}.}

\item{genesymbolOnly}{Whether or not to remove probes without gene symbol. Default is \code{FALSE}.}

\item{annot}{Annotation object, usually a \code{dataframe}. Make sure to name the probe ID variable \code{ProbeName}. Only set this argument when \code{genesymbolVar = TRUE}. Default is \code{NULL}.}

\item{annotProbeVar}{\code{annot} variable name for probe name. Default is \code{"ProbeName"}.}

\item{genesymbolVar}{The name of the variable for gene symbols from the \code{annot} object. Only set this argument when \code{genesymbolVar = TRUE}. Default is \code{NULL}.}

\item{n}{Number of genes to be clustered, numeric input or \code{"all"}. Default is \code{"all"}.}

\item{rmControl}{Set only when \code{ctrlProbe = TRUE} and \code{ctrlTypeVar} is properly set,  whether to remove control probes (Agilent platform) or not. Default is \code{TRUE}.}

\item{ctrlProbe}{Wether or not the data set has control type variable, with values \code{-1 (negative control)}, \code{0 (gene probes)} and \code{1 (positive control)}. Default is \code{TRUE}.}

\item{ctrlTypeVar}{Set only when \code{ctrlProbe = TRUE}, the control type variable. Default is the \code{Agilent} variable name \code{"ControlType"}.}

\item{sampleName}{A \code{vector} containing names to display for each heatmap column. Default is \code{NULL} and the function will use the column name from the input.}

\item{fct}{Input \code{factor} object for sample groupping labels.}

\item{colGroup}{Colour group, numeric or dependent on \code{fct}.}

\item{distance}{Distance calculation method. Default is \code{"euclidean"}. See \code{\link{dist}} for more.}

\item{clust}{Clustering method. Default is \code{"complete"}. See \code{\link{hclust}} for more.}

\item{ColSideCol}{If to display the top heatmap strip. Default is \code{TRUE}.}

\item{colColour}{Column group colour. Default is \code{"Paired"}. See \code{RColorBrewer} package for more.}

\item{mapColour}{Heat map colour. Default is \code{"PRGn"}. See \code{RColorBrewer} package for more.}

\item{n_mapColour}{Number of colours displayed. Default is \code{11}. See \code{RColorBrewer} package for more.}

\item{...}{Additional arguments for \code{heatmap.2} function from \code{gplots} package.}

\item{plotWidth}{Width of the plot. Unit is \code{inch}. Default is \code{7}.}

\item{plotHeight}{Height of the plot. Unit is \code{inch}. Default is \code{7}.}
}
\value{
A heatmap based on hierarchical clustering analysis in \code{pdf} format.
}
\description{
Legacy function. Wrapper for hierarchical clustering analysis and heatmap visualization.
}
\examples{
\dontrun{

# standard usage
rbioarray_hcluster(fltlist = normdata, n = 500, fct = conSum, trace = "none", srtCol = 45,
offsetCol = 0, adjCol = c(1, 0), labRow = FALSE, key.title = "", keysize = 1.5,
key.xlab = "Normalized expression value", key.ylab = "Probe count")

# for non microarray or RNAseq data sets
###### full data heatmap ######
## load the file
raw <- read.csv(file = "all_data.csv", na.strings = " ", stringsAsFactors = FALSE, check.names = FALSE)

## build the index
idx <- raw[, 1:2] # extract the sample information

conSum <- factor(idx$Condition, levels = unique(idx$Condition)) # extract the factor

# create the input data for RBioArray pacakge
rawT <- t(raw[, -(1:2)])
colnames(rawT) <- idx$SampleID
rawT <- apply(rawT, c(1,2), FUN = log2) # log2 tranforamtion
inputlist <- list(E = as.matrix(rawT),
                  genes = data.frame(GeneNames = rownames(rawT), ControlType = rep(0, length(rownames(rawT))),
                  stringsAsFactors = FALSE), targets = idx)

rbioarray_hcluster(plotName = "all", fltlist = inputlist, dataProbeVar = "GeneNames", n = "all", rmControl = FALSE, fct = conSum,
                   trace = "none",
                   distance = "euclidean", clust = "complete", colColour = "Paired",
                   mapColour = "RdBu", n_mapColour = 11,
                   srtCol = 30, offsetCol = 0, labRow = inputlist$genes$GeneNames,
                   key.title = "", keysize = 1.5, cexCol = 0.9, cexRow = 0.6,
                   key.xlab = "Log expression value", key.ylab = "miRNA count",
                   plotWidth = 10, plotHeight = 10)

}
}
